USE TRAINING;
-- JOINS--
-- INNER JOIN,LEFT JOIN,RIGHT JOIN,FULL JOIN--

CREATE TABLE CUSTOMERS_TBL(
CUSTID INT,
CUSTNAME VARCHAR(50)
); 

INSERT INTO CUSTOMERS_TBL VALUES (1000,'RAKEYSHH'),(1001,'RAHOUL'),(1002,'PRATIK'),(1003,'SWAPNIL'),(1004,'MANDAR');
SELECT * FROM CUSTOMERS_TBL;

CREATE TABLE TRANSACTION_TBL(
TRANSID INT,
CUSTID INT,
PRODNAME VARCHAR(50),
AMONUT int);

INSERT INTO TRANSACTION_TBL VALUES (1,1000,'SOFA',20000),(2,1001,'TV',15000),(3,1000,'MOBILE',25000),(4,1002,'LAPTOP',75000),
(5,1003,'CAR',500000),(6,1005,'TOYGUN',500);

SELECT * FROM TRANSACTION_TBL;

-- INNER JOIN--
SELECT * FROM CUSTOMERS_TBL C INNER JOIN TRANSACTION_TBL T ON C.CUSTID=T.CUSTID;

-- LEFT JOIN--
SELECT * FROM CUSTOMERS_TBL C LEFT JOIN TRANSACTION_TBL T ON C.CUSTID=T.CUSTID;

-- RIGHT JOIN--
SELECT * FROM CUSTOMERS_TBL C RIGHT JOIN TRANSACTION_TBL T ON C.CUSTID=T.CUSTID;

-- FULL JOIN--
SELECT * FROM CUSTOMERS_TBL C JOIN TRANSACTION_TBL T; 

-- GET THE CUSTOMERS NAME HAVE NOT PURCAHSED ANYTHING--
SELECT CUSTNAME FROM CUSTOMERS_TBL C INNER JOIN TRANSACTION_TBL T ON C.CUSTID=T.CUSTID WHERE TRANSID IS NULL; 

-- GET THE TRANSACTION DETAILS MADE BY UNREGISTERED CUSTOMER--
SELECT TRANSID FROM TRANSACTION_TBL T RIGHT JOIN CUSTOMERS_TBL C ON T.CUSTID=C.CUSTID WHERE C.CUSTID IS NULL;

-- SELF JOIN--
CREATE TABLE EMPLOYEE_TBL(
EMP_ID INT,
EMPNAME VARCHAR(50),
SALARY INT,
MGR_ID INT
);

INSERT INTO EMPLOYEE_TBL VALUES(1,'RAKEYSHH',25000,5);
INSERT INTO EMPLOYEE_TBL VALUES(2,'RAHOUL',30000,1);
INSERT INTO EMPLOYEE_TBL VALUES(3,'SWAPNIL',40000,7);
INSERT INTO EMPLOYEE_TBL VALUES(4,'MANDAR',15000,3);
INSERT INTO EMPLOYEE_TBL VALUES(5,'PRATIK',30000,4);
INSERT INTO EMPLOYEE_TBL VALUES(6,'YOGESH',80000,3);
INSERT INTO EMPLOYEE_TBL VALUES(7,'SACHIN',45000,10);
INSERT INTO EMPLOYEE_TBL VALUES(8,'SATISH',55000,2);
INSERT INTO EMPLOYEE_TBL VALUES(9,'SHIVA',10000,6);
INSERT INTO EMPLOYEE_TBL VALUES(10,'JAMIR',5000,9);

SELECT E.EMPNAME FROM EMPLOYEE_TBL E JOIN EMPLOYEE_TBL M ON E.MGR_ID=M.EMP_ID WHERE E.SALARY>M.SALARY;


-- SUBQUERY
SELECT COUNTRYNAME,PEOPLECOUNT FROM COUNTRY WHERE PEOPLECOUNT>1000000;
SELECT SUM(PEOPLECOUNT) FROM COUNTRY;
SELECT MAX(PEOPLECOUNT) FROM COUNTRY;
SELECT MIN(PEOPLECOUNT) FROM COUNTRY;
SELECT AVG(PEOPLECOUNT) FROM COUNTRY;
SELECT COUNTRYNAME,PEOPLECOUNT FROM COUNTRY WHERE PEOPLECOUNT<(SELECT AVG(PEOPLECOUNT) FROM COUNTRY);

-- GROUPBY OPERATIONS
SELECT * FROM COMPANY;
SELECT SUM(SALARY) AS TOT_SAL FROM COMPANY;
SELECT COMPANY, SUM(SALARY) AS TOT_SAL FROM COMPANY GROUP BY COMPANY;
SELECT COMPANY,PLACE,SUM(SALARY) AS TOT_SAL FROM COMPANY GROUP BY COMPANY,PLACE;

-- GROUP BY ORDER BY--
SELECT COMPANY, MIN(SALARY) AS MIN_SAL, MAX(SALARY) AS MAX_SAL 
FROM COMPANY
WHERE PLACE IS NOT NULL
GROUP BY COMPANY
ORDER BY MIN_SAL;

SELECT COMPANY, MIN(SALARY) AS MIN_SAL, MAX(SALARY) AS MAX_SAL
FROM COMPANY
WHERE PLACE IS NOT NULL
GROUP BY COMPANY
ORDER BY MIN_SAL DESC;

SELECT COMPANY, MIN(SALARY) AS MIN_SAL, MAX(SALARY) AS MAX_SAL
FROM COMPANY
WHERE PLACE IS NOT NULL
GROUP BY COMPANY
HAVING MAX_SAL>5000
ORDER BY MIN_SAL;

-- VIEW - VIEW IS VIRTUAL TABLE READ ONLY TABLE
 SELECT * FROM EMPLOYEE_TBL;
INSERT INTO EMPLOYEE_TBL VALUES (11,'PRASAD',50000,6);
CREATE OR REPLACE VIEW EMP_VIEW AS 
SELECT * FROM EMPLOYEE_TBL;
SELECT * FROM EMP_VIEW;
DROP VIEW EMP_VIEW;

CREATE OR REPLACE VIEW TEST AS
SELECT * FROM EMPLOYEE_TBL WHERE SALARY>50000;

SELECT * FROM TEST;
